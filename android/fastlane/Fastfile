default_platform(:android)

platform :android do

desc "Increment version code"
 lane :increment_vc do
 increment_version_code(
       gradle_file_path: "./app/build.gradle",
 )
end
desc "Custom increment version code"
lane :custom_increment_vc do
  gradle_file = "app/build.gradle"
  version_code = `grep versionCode #{gradle_file} | awk '{print $2}'`.to_i
  new_version_code = version_code + 1
  sh "sed -i 's/versionCode #{version_code}/versionCode #{new_version_code}/' #{gradle_file}"
  puts "Updated version code to #{new_version_code}"
end


  desc "Increment version code based on latest release from Firebase"
  lane :bump_version do
    # Fetch the latest release version from Firebase
    latest_release = firebase_app_distribution_get_latest_release(
      app: ENV["APP_ID"],   # Your Firebase App ID
      firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"] # Your Firebase CLI token
    )
    
    # Increment the version code based on the latest release version
    new_version_code = latest_release[:buildVersion].to_i + 1
    
    # Update the version code in the build.gradle file
    gradle(
      task: "incrementVersionCode",
      build_type: "debug",
      properties: {
        "versionCode" => new_version_code
      }
    )
    
    # Optional: Print the new version code
    puts "New version code is #{new_version_code}"

    # Optionally, you might want to build the app (e.g., assembleDebug or assembleRelease)
    # Uncomment and adjust if needed
    # gradle(
    #   task: "assembleDebug"
    # )
  end



desc "Build"
lane :build do
  bump_version
  gradle(
     task: "assemble",
     build_type: "debug"
   )
end

  desc "Lane for distributing app using Firebase App Distributions"
  lane :distribute do
    firebase_app_distribution(
      app: ENV["APP_ID"],
      android_artifact_type: "APK",
      apk_path: "../android/app/build/outputs/apk/debug/app-debug.apk",
      debug: true,
      firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"]
    )
  end
end
